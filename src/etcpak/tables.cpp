#include "tables.hpp"

#include <gsl/gsl-lite.hpp>

namespace
{
const std::array<int16_t, 16> g_alphaRange{{
  // FIXME g_alpha might be uninitialized here
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[0][7] - g_alpha[0][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[1][7] - g_alpha[1][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[2][7] - g_alpha[2][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[3][7] - g_alpha[3][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[4][7] - g_alpha[4][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[5][7] - g_alpha[5][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[6][7] - g_alpha[6][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[7][7] - g_alpha[7][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[8][7] - g_alpha[8][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[9][7] - g_alpha[9][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[10][7] - g_alpha[10][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[11][7] - g_alpha[11][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[12][7] - g_alpha[12][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[13][7] - g_alpha[13][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[14][7] - g_alpha[14][3])),
  gsl::narrow_cast<int16_t>(0x100FF / (1 + g_alpha[15][7] - g_alpha[15][3])),
}};
}

const std::array<std::array<int32_t, 4>, 8> g_table{{
  {2, 8, -2, -8},
  {5, 17, -5, -17},
  {9, 29, -9, -29},
  {13, 42, -13, -42},
  {18, 60, -18, -60},
  {24, 80, -24, -80},
  {33, 106, -33, -106},
  {47, 183, -47, -183},
}};

const std::array<std::array<uint32_t, 16>, 4> g_id{{
  {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
  {3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2},
  {5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4},
  {7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6, 7, 7, 6, 6},
}};

const std::array<uint32_t, 64> g_flags{
  {0x80800402, 0x80800402, 0x80800402, 0x80800402, 0x80800402, 0x80800402, 0x80800402, 0x8080E002,
   0x80800402, 0x80800402, 0x8080E002, 0x8080E002, 0x80800402, 0x8080E002, 0x8080E002, 0x8080E002,
   0x80000402, 0x80000402, 0x80000402, 0x80000402, 0x80000402, 0x80000402, 0x80000402, 0x8000E002,
   0x80000402, 0x80000402, 0x8000E002, 0x8000E002, 0x80000402, 0x8000E002, 0x8000E002, 0x8000E002,
   0x00800402, 0x00800402, 0x00800402, 0x00800402, 0x00800402, 0x00800402, 0x00800402, 0x0080E002,
   0x00800402, 0x00800402, 0x0080E002, 0x0080E002, 0x00800402, 0x0080E002, 0x0080E002, 0x0080E002,
   0x00000402, 0x00000402, 0x00000402, 0x00000402, 0x00000402, 0x00000402, 0x00000402, 0x0000E002,
   0x00000402, 0x00000402, 0x0000E002, 0x0000E002, 0x00000402, 0x0000E002, 0x0000E002, 0x0000E002}};

const std::array<std::array<int16_t, 8>, 16> g_alpha{{
  {-3, -6, -9, -15, 2, 5, 8, 14},
  {-3, -7, -10, -13, 2, 6, 9, 12},
  {-2, -5, -8, -13, 1, 4, 7, 12},
  {-2, -4, -6, -13, 1, 3, 5, 12},
  {-3, -6, -8, -12, 2, 5, 7, 11},
  {-3, -7, -9, -11, 2, 6, 8, 10},
  {-4, -7, -8, -11, 3, 6, 7, 10},
  {-3, -5, -8, -11, 2, 4, 7, 10},
  {-2, -6, -8, -10, 1, 5, 7, 9},
  {-2, -5, -8, -10, 1, 4, 7, 9},
  {-2, -4, -8, -10, 1, 3, 7, 9},
  {-2, -5, -7, -10, 1, 4, 6, 9},
  {-3, -4, -7, -10, 2, 3, 6, 9},
  {-1, -2, -3, -10, 0, 1, 2, 9},
  {-4, -6, -8, -9, 3, 5, 7, 8},
  {-3, -5, -7, -9, 2, 4, 6, 8},
}};

const std::array<IVec16, 2> g_table128_SIMD{{
  IVec16{2 * 128, 5 * 128, 9 * 128, 13 * 128, 18 * 128, 24 * 128, 33 * 128, 47 * 128},
  IVec16{8 * 128, 17 * 128, 29 * 128, 42 * 128, 60 * 128, 80 * 128, 106 * 128, 183 * 128},
}};

const std::array<IVec16, 16> g_alpha_SIMD{{
  IVec16(g_alpha[0][0],
         g_alpha[0][1],
         g_alpha[0][2],
         g_alpha[0][3],
         g_alpha[0][4],
         g_alpha[0][5],
         g_alpha[0][6],
         g_alpha[0][7]),
  IVec16(g_alpha[1][0],
         g_alpha[1][1],
         g_alpha[1][2],
         g_alpha[1][3],
         g_alpha[1][4],
         g_alpha[1][5],
         g_alpha[1][6],
         g_alpha[1][7]),
  IVec16(g_alpha[2][0],
         g_alpha[2][1],
         g_alpha[2][2],
         g_alpha[2][3],
         g_alpha[2][4],
         g_alpha[2][5],
         g_alpha[2][6],
         g_alpha[2][7]),
  IVec16(g_alpha[3][0],
         g_alpha[3][1],
         g_alpha[3][2],
         g_alpha[3][3],
         g_alpha[3][4],
         g_alpha[3][5],
         g_alpha[3][6],
         g_alpha[3][7]),
  IVec16(g_alpha[4][0],
         g_alpha[4][1],
         g_alpha[4][2],
         g_alpha[4][3],
         g_alpha[4][4],
         g_alpha[4][5],
         g_alpha[4][6],
         g_alpha[4][7]),
  IVec16(g_alpha[5][0],
         g_alpha[5][1],
         g_alpha[5][2],
         g_alpha[5][3],
         g_alpha[5][4],
         g_alpha[5][5],
         g_alpha[5][6],
         g_alpha[5][7]),
  IVec16(g_alpha[6][0],
         g_alpha[6][1],
         g_alpha[6][2],
         g_alpha[6][3],
         g_alpha[6][4],
         g_alpha[6][5],
         g_alpha[6][6],
         g_alpha[6][7]),
  IVec16(g_alpha[7][0],
         g_alpha[7][1],
         g_alpha[7][2],
         g_alpha[7][3],
         g_alpha[7][4],
         g_alpha[7][5],
         g_alpha[7][6],
         g_alpha[7][7]),
  IVec16(g_alpha[8][0],
         g_alpha[8][1],
         g_alpha[8][2],
         g_alpha[8][3],
         g_alpha[8][4],
         g_alpha[8][5],
         g_alpha[8][6],
         g_alpha[8][7]),
  IVec16(g_alpha[9][0],
         g_alpha[9][1],
         g_alpha[9][2],
         g_alpha[9][3],
         g_alpha[9][4],
         g_alpha[9][5],
         g_alpha[9][6],
         g_alpha[9][7]),
  IVec16(g_alpha[10][0],
         g_alpha[10][1],
         g_alpha[10][2],
         g_alpha[10][3],
         g_alpha[10][4],
         g_alpha[10][5],
         g_alpha[10][6],
         g_alpha[10][7]),
  IVec16(g_alpha[11][0],
         g_alpha[11][1],
         g_alpha[11][2],
         g_alpha[11][3],
         g_alpha[11][4],
         g_alpha[11][5],
         g_alpha[11][6],
         g_alpha[11][7]),
  IVec16(g_alpha[12][0],
         g_alpha[12][1],
         g_alpha[12][2],
         g_alpha[12][3],
         g_alpha[12][4],
         g_alpha[12][5],
         g_alpha[12][6],
         g_alpha[12][7]),
  IVec16(g_alpha[13][0],
         g_alpha[13][1],
         g_alpha[13][2],
         g_alpha[13][3],
         g_alpha[13][4],
         g_alpha[13][5],
         g_alpha[13][6],
         g_alpha[13][7]),
  IVec16(g_alpha[14][0],
         g_alpha[14][1],
         g_alpha[14][2],
         g_alpha[14][3],
         g_alpha[14][4],
         g_alpha[14][5],
         g_alpha[14][6],
         g_alpha[14][7]),
  IVec16(g_alpha[15][0],
         g_alpha[15][1],
         g_alpha[15][2],
         g_alpha[15][3],
         g_alpha[15][4],
         g_alpha[15][5],
         g_alpha[15][6],
         g_alpha[15][7]),
}};

const IVec16 g_alphaRange_SIMD
  = IVec16(g_alphaRange[0], g_alphaRange[1], g_alphaRange[4], g_alphaRange[5], g_alphaRange[8], g_alphaRange[14], 0, 0);
